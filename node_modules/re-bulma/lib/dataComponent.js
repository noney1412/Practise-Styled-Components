'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DataComponent = function (_Component) {
  _inherits(DataComponent, _Component);

  function DataComponent() {
    _classCallCheck(this, DataComponent);

    return _possibleConstructorReturn(this, (DataComponent.__proto__ || Object.getPrototypeOf(DataComponent)).apply(this, arguments));
  }

  _createClass(DataComponent, [{
    key: 'dataProps',
    value: function dataProps() {
      var extraProps = {};
      if (typeof this.props.data !== 'undefined' && this.props.data && this.props.data.length > 0) {
        this.props.data.forEach(function (d) {
          if (d.name && d.value) {
            var v = typeof d.value === 'string' ? d.value.replace(/'/g, '&quot;') : d.value;
            extraProps['data-' + encodeURIComponent(d.name)] = v;
          }
        });
      }
      return extraProps;
    }
  }]);

  return DataComponent;
}(_react.Component);

DataComponent.propTypes = {
  data: _react.PropTypes.array
};
exports.default = DataComponent;